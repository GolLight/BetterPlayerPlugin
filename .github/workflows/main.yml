name: 🧩 Better Player 插件自动发布 (Release)

# 仅在推送 Tag 时触发 (例如 v1.4.1.0)
on:
  push:
    tags:
      - 'v*.*.*'
  # 允许手动在 Actions 页面触发
  workflow_dispatch:

env:
  CS_PROJ_PATH: Jellyfin.Plugin.BetterPlayer/BetterPlayerPlugin/BetterPlayerPlugin.csproj
  MANIFEST_PATH: manifest.json
  PLUGIN_DLL: BetterPlayerPlugin.dll
  ZIP_NAME: BetterPlayerPlugin.zip

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必须有写入权限才能提交 manifest 和创建 release

    steps:
      # 1. 环境准备
      - name: ⬇️ 检出代码 (Checkout code)
        uses: actions/checkout@v5.0.0
        with:
          # 必须拉取完整历史记录，fetch-depth 必须为 0
          fetch-depth: 0

      - name: ⚙️ 设置 .NET 9.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 2. 提取版本号和 Changelog (已修正版本赋值)
      - name: 🔖 提取版本信息及 Changelog
        run: |
          # a. 提取当前版本 (V1.0.0.1 -> 1.0.0.1)
          VERSION_TAG_NAME="${{ github.ref_name }}"
          # 正确地移除 'v' 前缀并赋值给 CURRENT_VERSION
          CURRENT_VERSION="${VERSION_TAG_NAME#v}" 
          
          echo "PLUGIN_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current Version: $CURRENT_VERSION"
          
          # b. 获取上一个 Tag
          # 关键修正：按日期排序并使用 grep -v 排除当前正在处理的 Tag 名称，然后取第一个
          PREVIOUS_TAG=$(git for-each-ref --sort='-*creatordate' --format '%(refname:short)' refs/tags | grep -v "$VERSION_TAG_NAME" | sed -n 1p) || true
          
          echo "Previous Tag Found: $PREVIOUS_TAG"
          
          # c. 提取 Changelog
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有上一个 Tag (第一次发布)
            CHANGELOG=$(git log --pretty=format:"* %s" | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "未找到上一个 Tag，使用所有 Commit 消息作为 Changelog。"
          else
            # 从上一个 Tag 到当前 Commit 之间的 commits
            CHANGELOG=$(git log "$PREVIOUS_TAG"..HEAD --pretty=format:"* %s" | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "Changelog 已从 $PREVIOUS_TAG 提取。"
          fi
          
          # 将 CHANGELOG 结果存入环境变量
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 3. 更新 .csproj 版本
      - name: 🆙 更新 .csproj 版本号
        uses: rvolo/xml-replace-action@v0.3
        with:
          filepath: "${{ env.CS_PROJ_PATH }}"
          xpath: "/Project/PropertyGroup/Version/text()"
          replace: "${{ env.PLUGIN_VERSION }}"

      # 4. 构建项目
      - name: 🏗️ 构建插件 (dotnet build)
        run: dotnet build "${{ env.CS_PROJ_PATH }}" -c Release

      # 5. 打包 ZIP 文件 (仅打包 DLL)
      - name: 📦 打包插件 ZIP (仅 DLL)
        run: |
          pwd
          # 切换到构建输出目录
          BUILD_PATH="Jellyfin.Plugin.BetterPlayer/BetterPlayerPlugin/bin/Release/net9.0"
          cd "$BUILD_PATH"

          # ZIP 文件输出到仓库根目录
          ZIP_OUTPUT="${{ github.workspace }}/${{ env.ZIP_NAME }}"

          # 使用 zip 命令，只打包核心 DLL 文件
          zip "$ZIP_OUTPUT" ${{ env.PLUGIN_DLL }}

          # 返回仓库根目录
          cd - > /dev/null
          pwd
          
          echo "ZIP 文件已创建: ${{ env.ZIP_NAME }}"

      # 6. 更新 manifest.json 文件 - 核心修改部分
      - name: 📝 更新 manifest.json (新增版本对象)
        run: |
          sudo apt-get install -y jq

          # a. 计算大写 MD5 校验和
          MD5_UPPER=$(md5sum "${{ env.ZIP_NAME }}" | awk '{print $1}' | tr '[:lower:]' '[:upper:]')
          echo "Calculated MD5: $MD5_UPPER"
          
          # b. 获取当前 UTC 时间戳
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # c. 构建新的版本对象 (JSON 字符串)
          # 注意：此处需要对 CHANGELOG 进行转义处理，以便其作为 JSON 字符串的一部分
          CHANGELOG_ESCAPED=$(echo -e "${{ env.CHANGELOG }}" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          NEW_VERSION_JSON="{
            \"version\": \"${{ env.PLUGIN_VERSION }}\",
            \"changelog\": \"$CHANGELOG_ESCAPED\",
            \"targetAbi\": \"10.11.0.0\",
            \"sourceUrl\": \"https://github.com/GolLight/BetterPlayerPlugin/releases/download/v${{ env.PLUGIN_VERSION }}/${{ env.ZIP_NAME }}\",
            \"checksum\": \"$MD5_UPPER\",
            \"timestamp\": \"$TIMESTAMP\"
          }"

          # d. 使用 jq 将新对象添加到 versions 数组的开头 (prepend)
          jq --argjson new_version "$NEW_VERSION_JSON" \
             '.[0].versions |= [ $new_version ] + .' ${{ env.MANIFEST_PATH }} > manifest_updated.json
             
          mv manifest_updated.json ${{ env.MANIFEST_PATH }}

      # 7. 提交 manifest.json 和 .csproj
      - name: 💾 提交更新后的文件
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ${{ env.MANIFEST_PATH }}
          git add ${{ env.CS_PROJ_PATH }}
          git diff
          # 检查是否有实际改动，没有则不执行 commit
          git diff --quiet --exit-code || git commit -m "chore(release): Update manifest and csproj for v${{ env.PLUGIN_VERSION }} release."
          # git push

      # 8. 创建 GitHub Release
      - name: 🏷️ 创建 GitHub Release 并上传资产
        uses: softprops/action-gh-release@v2.4.1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: ${{ env.ZIP_NAME }}
